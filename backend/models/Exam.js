import mongoose from 'mongoose';

const examSchema = new mongoose.Schema({
  title: {
    type: String,
    required: [true, 'Exam title is required'],
    trim: true
  },
  subjectId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Subject',
    required: true
  },
  level: {
    type: String,
    enum: ['Beginner', 'Intermediate', 'Advanced', 'Master'],
    required: true
  },
  mode: {
    type: String,
    enum: ['strict', 'lenient'],
    default: 'lenient'
  },
  duration: {
    type: Number,
    required: [true, 'Duration is required'],
    min: 1 // in minutes
  },
  totalMarks: {
    type: Number,
    required: true,
    min: 1
  },
  passingPercentage: {
    type: Number,
    default: 60,
    min: 0,
    max: 100
  },
  questions: [{
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Question'
  }],
  availableFrom: {
    type: Date,
    default: Date.now
  },
  availableTo: {
    type: Date,
    required: true
  },
  isActive: {
    type: Boolean,
    default: true
  },
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  examType: {
    type: String,
    enum: ['general', 'drive'],
    default: 'general'
  },
  driveDetails: {
    companyName: String,
    description: String
  },
  requiresUniversityEmail: {
    type: Boolean,
    default: false // true for college drives, false for general exams
  },
  isAutoGenerated: {
    type: Boolean,
    default: false // true for automatic general exams
  },
  questionCount: {
    type: Number,
    default: 10 // Number of random questions for auto-generated exams
  }
}, {
  timestamps: true
});

// Auto-set mode to lenient for general exams and requiresUniversityEmail for drives
examSchema.pre('save', function(next) {
  if (this.examType === 'general') {
    this.mode = 'lenient';
    this.requiresUniversityEmail = false;
  } else if (this.examType === 'drive') {
    this.requiresUniversityEmail = true; // College drives require university email
  }
  next();
});

const Exam = mongoose.model('Exam', examSchema);

export default Exam;
